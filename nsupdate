#!/usr/bin/python3

'''
Freakin' Awesome Dynamic DNS client.

Usage:
  faddnsc [options] [(-u|--url-prefix=)<url-prefix>]...

Options:
  -h, --help  Help.
  --log-level DEBUG | INFO | WARNING | ERROR
              Debug level [default: INFO].
  -d, --domain=<domain>
              Domain [default: asterix.cz].
  --host=<host>
              Host [default: current hostname].
  -i, --interval=<interval>
              Update interval (s) [default: 600].
  (-u|--url-prefix=)<url-prefix>
              URL prefix.
'''

from version import __version__

import sys
import time
import socket
import re
import os.path
from configparser import ConfigParser
import docopt
from nsupdate import *

import logging
#sys.excepthook = log.log_exception


def logging_setup(level):
	if sys.platform == 'win32':
		fn = 'nsupdate.log'
	else:
		fn = None
	#endif

	logging.basicConfig(filename=fn, level=level)
#enddef


class Config:
	def __init__(self):
		self.domain = None
		self.host = socket.gethostname().lower()
		self.interval = 600
		self.url_prefix = ['http://podgorny.cz:8765/']
	#enddef

	def read_from_ini(self, fn):
		ini = ConfigParser()
		ini.read(fn)

		self.domain = ini.get('General', 'Domain', fallback=self.domain)
		self.host = ini.get('General', 'Host', fallback=self.host)
		self.interval = ini.getint('General', 'Interval', fallback=self.interval)
		self.url_prefix = ini.get('General', 'UrlPrefix', fallback=self.url_prefix)
	#enddef

	def check(self):
		if not self.domain: return 'domain not specified!'
	#enddef

	# TODO: move this to some common module
	def __str__(self):
		l = []

		for k, v in vars(self).items():
			l.append('%s=\'%s\'' % (k, v))
		#endfor

		return ', '.join(l)
	#enddef
#endclass

cfg = Config()


def main():
	args = docopt.docopt(__doc__, version=__version__)

	log_level = args['--log-level']
	logging_setup(log_level)

	logging.info('*' * 40)
	logging.info('starting nsupdate v%s' % __version__)

	logging.debug(str(args))

	for fn in (os.path.expanduser('~/.nsupdate.conf'), 'nsupdate.ini', '/etc/nsupdate.conf'):
		if not os.path.isfile(fn): continue
		logging.info('reading configuration from %s' % fn)
		cfg.read_from_ini(fn)
		break
	#endfor

	if args['--domain']: cfg.domain = args['--domain']
	if args['--host']: cfg.host = args['--host']
	if args['--interval']: cfg.interval = float(args['--interval'])
	if args['--url-prefix']: cfg.url_prefix = args['--url-prefix']

	err = cfg.check()
	if err:
		logging.critical(err)
		return
	#endif

	logging.info('%s' % cfg)

	if sys.platform == 'win32':
		logging.info('detected win32')
		get_addrs = get_addrs_windows
	elif sys.platform.startswith('linux'):
		logging.info('detected linux')
		get_addrs = get_addrs_linux
	else:
		logging.critical('unknown platform! (%s)' % sys.platform)
		return
	#endif

	try:
		while 1:
			t = time.time()

			addrs = get_addrs()
			logging.debug(str(addrs))

			for url_prefix in cfg.url_prefix:
				logging.debug('sending info to %s' % url_prefix)
				send_addrs(url_prefix, cfg.host, cfg.domain, __version__, addrs)
			#endfor

			logging.debug('sleeping for %ss' % cfg.interval)
			while time.time() - t < cfg.interval:
				# had to add this shit because of the weird 'function call interrupted' behaviour on windows
				try: time.sleep(1)
				except KeyboardInterrupt: raise
				except: pass
			#endwhile
		#endwhile
	except KeyboardInterrupt:
		logging.debug('keyboard interrupt!')
	#endtry

	logging.debug('exited main loop')
#enddef

if __name__ == '__main__': main()
