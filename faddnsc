#!/usr/bin/python3

"""
Freakin' Awesome Dynamic DNS client.

Usage:
  faddnsc [options]

Options:
  -h, --help      Help.
  --log-level DEBUG | INFO | WARNING | ERROR
                  Debug level [default: INFO].
  -c <config_fn>  Config file path.
  --host=<host>   Hostname to report.
  -i, --interval=<interval>
                  Update interval (s).
  -u, --url=<url>
                  URL of FADDNS server.
"""

from faddns.version import __version__

import os
import sys
import docopt
import faddns
from faddns.cfg import cfg

import logging

sys.excepthook = lambda t, v, tb: logging.critical("unhandled exception", exc_info=(t, v, tb))


def main():
    args = docopt.docopt(__doc__, version=__version__)

    log_level = args["--log-level"]

    if sys.platform == "win32":
        log_fn = "faddnsc.log"
    else:
        log_fn = None

    faddns.logging_setup(log_level, log_fn)

    logging.info("*" * 40)
    logging.info("starting faddnsc v%s" % __version__)

    logging.debug(str(args))

    cfg_fn = args["-c"]
    if not cfg_fn:
        for fn in [os.path.expanduser("~/.faddnsc.conf"), "faddnsc.ini", "/etc/faddnsc.conf"]:
            if not os.path.isfile(fn):
                continue
            cfg_fn = fn
            break

    if cfg_fn and not os.path.isfile(cfg_fn):
        logging.critical("%s does not exist, exiting" % cfg_fn)
        return

    if cfg_fn:
        logging.info("reading configuration from %s" % cfg_fn)
        cfg.read_from_ini(cfg_fn)
    else:
        logging.info("no configuration file specified nor found")

    if args["--host"]:
        cfg.host = args["--host"]
    if args["--interval"]:
        cfg.interval = float(args["--interval"])
    if args["--url"]:
        cfg.url = args["--url"]

    err = cfg.check()
    if err:
        logging.critical(err)
        return

    logging.info("%s" % cfg)

    if sys.platform == "win32":
        logging.info("detected win32")
        get_addrs_f = faddns.get_addrs_windows
    elif sys.platform.startswith("linux"):
        logging.info("detected linux")
        get_addrs_f = faddns.get_addrs_linux
    else:
        logging.critical("unknown platform! (%s)" % sys.platform)
        return

    ml = faddns.MainLoop(get_addrs_f, cfg.host, cfg.url, __version__, cfg.interval)

    try:
        ml.run()
    except KeyboardInterrupt:
        logging.debug("keyboard interrupt!")

    logging.info("exit")


if __name__ == "__main__":
    main()
