#!/usr/bin/python3

'''
Freakin' Awesome Dynamic DNS client - GUI version.

Usage:
  faddnsc [options]

Options:
  -h, --help      Help.
  --log-level DEBUG | INFO | WARNING | ERROR
                  Debug level [default: INFO].
  -c <config_fn>  Config file path.
  --host=<host>   Hostname to report.
  -i, --interval=<interval>
                  Update interval (s).
  -u, --url=<url>
                  URL of FADDNS server.
  --no-tray       Disable tray icon.
'''

from version import __version__

import os
import sys
from PySide.QtCore import *
from PySide.QtGui import *
import threading
from cfg import cfg
import docopt

import logging
sys.excepthook = lambda t, v, tb: logging.critical('unhandled exception', exc_info=(t, v, tb))

from faddns import *


get_addrs = None  # TODO: ugly


class MyTray(QSystemTrayIcon):
	def __init__(self, app, ml):
		icon = QIcon('faddns.png')
		super().__init__(icon)

		self.app = app
		self.ml = ml

		self.addrs_old = None

		self.setToolTip('faddnsc_gui v%s' % __version__)

		menu = QMenu()
		menu.addAction('Force refresh', self.on_refresh)
		menu.addAction('Exit', self.on_exit)
		self.setContextMenu(menu)

		self.show()

	def on_refresh(self):
		logging.info('forced refresh')

		self.ml.refresh()

	def on_exit(self):
		self.app.quit()


def main():
	args = docopt.docopt(__doc__, version=__version__)

	log_level = args['--log-level']
	logging_setup(log_level, 'faddnsc_gui.log')

	logging.info('*' * 40)
	logging.info('starting faddnsc_gui v%s' % __version__)

	logging.debug(str(args))

	cfg_fn = args['-c']
	if not cfg_fn:
		for fn in (os.path.expanduser('~/.faddnsc.conf'), 'faddnsc.ini', '/etc/faddnsc.conf'):
			if not os.path.isfile(fn):
				continue
			cfg_fn = fn
			break

	if cfg_fn and not os.path.isfile(cfg_fn):
		logging.critical('%s does not exist, exiting')
		return

	if cfg_fn:
		logging.info('reading configuration from %s' % cfg_fn)
		cfg.read_from_ini(cfg_fn)
	else:
		logging.info('no configuration file specified nor found')

	if args['--host']:
		cfg.host = args['--host']
	if args['--interval']:
		cfg.interval = float(args['--interval'])
	if args['--url']:
		cfg.url = args['--url']

	err = cfg.check()
	if err:
		logging.critical(err)
		return

	logging.info('%s' % cfg)

	global get_addrs
	if sys.platform == 'win32':
		logging.info('detected win32')
		get_addrs_f = get_addrs_windows
	elif sys.platform.startswith('linux'):
		logging.info('detected linux')
		get_addrs_f = get_addrs_linux
	else:
		logging.critical('unknown platform! (%s)' % sys.platform)
		return

	ml = MainLoop(get_addrs_f, cfg.host, cfg.url, __version__, cfg.interval)
	thr = threading.Thread(target=ml.run)
	thr.start()

	app = QApplication(sys.argv[1:])

	if not args['--no-tray']:
		tray = MyTray(app, ml)

	app.exec_()

	ml.stop()
	thr.join()

	logging.info('exit')


if __name__ == '__main__':
	main()
